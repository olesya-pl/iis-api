// <auto-generated />
using System;
using Iis.FlightRadar.DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Iis.FlightRadar.DataModel.Migrations
{
    [DbContext(typeof(FlightsContext))]
    [Migration("20220203090326_ClearDatabase")]
    partial class ClearDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:enum_Aircraft_purposeType", "civil,millitary")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Iis.FlightRadar.DataModel.Aircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DetailedModel")
                        .HasColumnName("detailedModel")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Icao")
                        .HasColumnName("icao")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Model")
                        .HasColumnName("model")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("OwnerId")
                        .HasColumnName("ownerId")
                        .HasColumnType("integer");

                    b.Property<string>("Photo")
                        .HasColumnName("photo")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RegistrationNumber")
                        .HasColumnName("registration_number")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Aircraft");
                });

            modelBuilder.Entity("Iis.FlightRadar.DataModel.Airports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("Altitude")
                        .HasColumnName("altitude")
                        .HasColumnType("numeric");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CountryCode")
                        .HasColumnName("countryCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CountryCodeLong")
                        .HasColumnName("countryCodeLong")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Iata")
                        .HasColumnName("iata")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Icao")
                        .HasColumnName("icao")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<decimal?>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Website")
                        .HasColumnName("website")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("Iis.FlightRadar.DataModel.Flights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ArrivalAirportId")
                        .HasColumnName("arrivalAirportId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DepartureAirportId")
                        .HasColumnName("departureAirportId")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalId")
                        .HasColumnName("externalId")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FlightNo")
                        .HasColumnName("flightNo")
                        .HasColumnType("character(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("Meta")
                        .HasColumnName("meta")
                        .HasColumnType("json");

                    b.Property<int?>("PlaneId")
                        .HasColumnName("planeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RealArrivalAt")
                        .HasColumnName("realArrivalAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RealDepartureAt")
                        .HasColumnName("realDepartureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ScheduledArrivalAt")
                        .HasColumnName("scheduledArrivalAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ScheduledDepartureAt")
                        .HasColumnName("scheduledDepartureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalAirportId");

                    b.HasIndex("DepartureAirportId");

                    b.HasIndex("PlaneId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Iis.FlightRadar.DataModel.Operators", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("About")
                        .HasColumnName("about")
                        .HasColumnType("json");

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Iata")
                        .HasColumnName("iata")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Icao")
                        .HasColumnName("icao")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ShortName")
                        .HasColumnName("shortName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("Iis.FlightRadar.DataModel.Routes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("Altitude")
                        .HasColumnName("altitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Callsign")
                        .HasColumnName("callsign")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("FlightId")
                        .HasColumnName("flightId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("numeric");

                    b.Property<double?>("Speed")
                        .HasColumnName("speed")
                        .HasColumnType("double precision");

                    b.Property<string>("SquawkCode")
                        .HasColumnName("squawk_code")
                        .HasColumnType("character(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<DateTime?>("TimeNow")
                        .HasColumnName("timeNow")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Track")
                        .HasColumnName("track")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FlightId", "Latitude", "Longitude", "Altitude", "TimeNow")
                        .IsUnique()
                        .HasName("routes_flight_id_latitude_longitude_altitude_time_now");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Iis.FlightRadar.DataModel.Aircraft", b =>
                {
                    b.HasOne("Iis.FlightRadar.DataModel.Operators", "Owner")
                        .WithMany("Aircraft")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("Aircraft_ownerId_fkey")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Iis.FlightRadar.DataModel.Flights", b =>
                {
                    b.HasOne("Iis.FlightRadar.DataModel.Airports", "ArrivalAirport")
                        .WithMany("FlightsArrivalAirport")
                        .HasForeignKey("ArrivalAirportId")
                        .HasConstraintName("Flights_arrivalAirportId_fkey")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Iis.FlightRadar.DataModel.Airports", "DepartureAirport")
                        .WithMany("FlightsDepartureAirport")
                        .HasForeignKey("DepartureAirportId")
                        .HasConstraintName("Flights_departureAirportId_fkey")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Iis.FlightRadar.DataModel.Aircraft", "Plane")
                        .WithMany("Flights")
                        .HasForeignKey("PlaneId")
                        .HasConstraintName("Flights_planeId_fkey")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Iis.FlightRadar.DataModel.Routes", b =>
                {
                    b.HasOne("Iis.FlightRadar.DataModel.Flights", "Flight")
                        .WithMany("Routes")
                        .HasForeignKey("FlightId")
                        .HasConstraintName("Routes_flightId_fkey")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
