// <auto-generated />
using System;
using Iis.DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IIS.Core.Migrations
{
    [DbContext(typeof(OntologyContext))]
    [Migration("20200213151836_AddFileHash")]
    partial class AddFileHash
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Iis.DataModel.Analytics.AnalyticIndicatorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Query")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("AnalyticIndicators");
                });

            modelBuilder.Entity("Iis.DataModel.Analytics.AnalyticQueryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("DateRanges")
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<Guid>("LastUpdaterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastUpdaterId");

                    b.ToTable("AnalyticQueries");
                });

            modelBuilder.Entity("Iis.DataModel.Analytics.AnalyticQueryIndicatorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IndicatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QueryId")
                        .HasColumnType("uuid");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorId");

                    b.HasIndex("QueryId");

                    b.ToTable("AnalyticQueryIndicators");
                });

            modelBuilder.Entity("Iis.DataModel.AttributeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("Iis.DataModel.AttributeTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("ScalarType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AttributeTypes");
                });

            modelBuilder.Entity("Iis.DataModel.Materials.FileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentHash")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<byte[]>("Contents")
                        .HasColumnType("bytea");

                    b.Property<bool>("IsTemporary")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContentHash");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Iis.DataModel.Materials.MaterialEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("ParentId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Iis.DataModel.Materials.MaterialFeatureEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialInfoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Relation")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MaterialInfoId");

                    b.HasIndex("NodeId");

                    b.ToTable("MaterialFeatures");
                });

            modelBuilder.Entity("Iis.DataModel.Materials.MaterialInfoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("SourceType")
                        .HasColumnType("text");

                    b.Property<string>("SourceVersion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialInfos");
                });

            modelBuilder.Entity("Iis.DataModel.NodeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<Guid>("NodeTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NodeTypeId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Iis.DataModel.NodeTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAbstract")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Meta")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("NodeTypes");
                });

            modelBuilder.Entity("Iis.DataModel.OntologyMigrationsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<string>("Log")
                        .HasColumnType("text");

                    b.Property<string>("MigrationRules")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StructureAfter")
                        .HasColumnType("text");

                    b.Property<string>("StructureBefore")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OntologyMigrations");
                });

            modelBuilder.Entity("Iis.DataModel.RelationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SourceNodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TargetNodeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SourceNodeId");

                    b.HasIndex("TargetNodeId");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("Iis.DataModel.RelationTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("EmbeddingOptions")
                        .HasColumnType("integer");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<Guid>("SourceTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TargetTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SourceTypeId");

                    b.HasIndex("TargetTypeId");

                    b.ToTable("RelationTypes");
                });

            modelBuilder.Entity("Iis.DataModel.Reports.ReportEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Recipient")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Iis.DataModel.Reports.ReportEventEntity", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.HasKey("ReportId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("ReportEvents");
                });

            modelBuilder.Entity("Iis.DataModel.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Iis.DataModel.Analytics.AnalyticIndicatorEntity", b =>
                {
                    b.HasOne("Iis.DataModel.Analytics.AnalyticIndicatorEntity", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Iis.DataModel.Analytics.AnalyticQueryEntity", b =>
                {
                    b.HasOne("Iis.DataModel.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iis.DataModel.UserEntity", "LastUpdater")
                        .WithMany()
                        .HasForeignKey("LastUpdaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Iis.DataModel.Analytics.AnalyticQueryIndicatorEntity", b =>
                {
                    b.HasOne("Iis.DataModel.Analytics.AnalyticIndicatorEntity", "Indicator")
                        .WithMany("QueryIndicators")
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iis.DataModel.Analytics.AnalyticQueryEntity", "Query")
                        .WithMany("Indicators")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Iis.DataModel.AttributeEntity", b =>
                {
                    b.HasOne("Iis.DataModel.NodeEntity", "Node")
                        .WithOne("Attribute")
                        .HasForeignKey("Iis.DataModel.AttributeEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Iis.DataModel.AttributeTypeEntity", b =>
                {
                    b.HasOne("Iis.DataModel.NodeTypeEntity", "NodeType")
                        .WithOne("AttributeType")
                        .HasForeignKey("Iis.DataModel.AttributeTypeEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Iis.DataModel.Materials.MaterialEntity", b =>
                {
                    b.HasOne("Iis.DataModel.Materials.FileEntity", "File")
                        .WithMany("Materials")
                        .HasForeignKey("FileId");

                    b.HasOne("Iis.DataModel.Materials.MaterialEntity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Iis.DataModel.Materials.MaterialFeatureEntity", b =>
                {
                    b.HasOne("Iis.DataModel.Materials.MaterialInfoEntity", "MaterialInfo")
                        .WithMany("MaterialFeatures")
                        .HasForeignKey("MaterialInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iis.DataModel.NodeEntity", "Node")
                        .WithMany("MaterialFeatures")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Iis.DataModel.Materials.MaterialInfoEntity", b =>
                {
                    b.HasOne("Iis.DataModel.Materials.MaterialEntity", "Material")
                        .WithMany("MaterialInfos")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Iis.DataModel.NodeEntity", b =>
                {
                    b.HasOne("Iis.DataModel.NodeTypeEntity", "NodeType")
                        .WithMany("Nodes")
                        .HasForeignKey("NodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Iis.DataModel.RelationEntity", b =>
                {
                    b.HasOne("Iis.DataModel.NodeEntity", "Node")
                        .WithOne("Relation")
                        .HasForeignKey("Iis.DataModel.RelationEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iis.DataModel.NodeEntity", "SourceNode")
                        .WithMany("OutgoingRelations")
                        .HasForeignKey("SourceNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iis.DataModel.NodeEntity", "TargetNode")
                        .WithMany("IncomingRelations")
                        .HasForeignKey("TargetNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Iis.DataModel.RelationTypeEntity", b =>
                {
                    b.HasOne("Iis.DataModel.NodeTypeEntity", "NodeType")
                        .WithOne("RelationType")
                        .HasForeignKey("Iis.DataModel.RelationTypeEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iis.DataModel.NodeTypeEntity", "SourceType")
                        .WithMany("OutgoingRelations")
                        .HasForeignKey("SourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iis.DataModel.NodeTypeEntity", "TargetType")
                        .WithMany("IncomingRelations")
                        .HasForeignKey("TargetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Iis.DataModel.Reports.ReportEventEntity", b =>
                {
                    b.HasOne("Iis.DataModel.NodeEntity", "Node")
                        .WithMany("ReportEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iis.DataModel.Reports.ReportEntity", "Report")
                        .WithMany("ReportEvents")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
